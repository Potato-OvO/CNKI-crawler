import requests
import re
import parsel
import csv

# 构造请求参数
url = 'https://kns.cnki.net/KNS8/Brief/GetGridTableHtml'
headers = {
    'Host': 'kns.cnki.net',
    'Origin': 'https://kns.cnki.net',
    'Referer': 'https://kns.cnki.net/kns8/defaultresult/index',
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36',
}
param = {
}
# url列表
url_list = []
SearchSql = []


def Parsed_pages(subject_name, num):
    """
    解析需要爬取的所有的href连接，传参给get_url()
    :return:
    """
    for i in range(1, num):
        print(f"正在获取第{i}页数据")
        if i == 1:
            data = {
                'IsSearch': 'true',
                'QueryJson': '{"Platform":"","DBCode":"SCDB","KuaKuCode":"CJFQ,CDMD,CIPD,CCND,CISD,SNAD,BDZK,CJFN,CCJD","QNode":{"QGroup":[{"Key":"Subject","Title":"","Logic":1,"Items":[{"Title":"主题","Name":"SU","Value":"' + subject_name + '","Operate":"%=","BlurType":""}],"ChildItems":[]}]}}',
                'PageName': 'DefaultResult',
                'DBCode': 'SCDB',
                'KuaKuCodes': 'CJFQ,CDMD,CIPD,CCND,CISD,SNAD,BDZK,CJFN,CCJD',
                'CurPage': '1',
                'RecordsCntPerPage': '20',
                'CurDisplayMode': 'listmode',
                # 'CurrSortField': '%e5%8f%91%e8%a1%a8%e6%97%b6%e9%97%b4%2f(%e5%8f%91%e8%a1%a8%e6%97%b6%e9%97%b4%2c%27TIME%27)',
                'CurrSortFieldType': 'desc',
                'IsSentenceSearch': 'false',
                'Subject': '',
            }
            response = requests.post(url=url, headers=headers, data=data)
            datas = response.text
            selector = parsel.Selector(datas)
            a_list = selector.css('td.name a')
            search = selector.css('#sqlVal').css('::attr(value)').get()
            SearchSql.append(search)
            getUrl(a_list)
        else:
            data = {
                'IsSearch': 'false',
                # 'SearchSql
                # 'SearchSql': '0645419CC2F0B23BC604FFC82ADF67C6E920108EDAD48468E8156BA693E89F481391D6F5096D7FFF3585B29E8209A884EFDF8EF1B43B4C7232E120D4832CCC896D30C069E762ACAB990E5EBAAD03C09721B4573440249365A4157D3C93DC874963F6078A465F9A4E6BEED14E5FD119B250F0488206491CF1C7F670020480B48EE2FF3341B3B9C8A0A38F9913EF596174EDD44BBA8277DA2BE793C92DF83782297DE55F70BBF92D5397159D64D1D3DAC96FAD28213BD3E1912A5B4A4AD58E5965CBDBA01069691140F14FD0298FBD1F452C7779EFF17124633292E356C88367122976245AA928FA07D061C0E091BB1136031750CD76D7D64E9D75B7FBAB11CAA5B80183AC60BB0885D2C0A0938C7D1F849656014326473DCB797D5D273C845DAF7FCE49D21478E9B06B77ADE6253ACD4FE1D87EE31B4B2C94E071EE733B3A64EA6EE9CD5F222FCD3DA1D83D9133EF8C9BED9ED3E55DA15F3B4A37C85463B60D2F0BEA46FC7135898D7D93F63AF8B2246716E32B699238901588EE5D1DEF30A01DCE9957CF6934E8B11E273747F9A9BB8ADF535E5E76F6A9386CFBE605748C132DA05E2D31832199B0A4ECF170ACA47154423CF6BBD9607FC505765E95637F93DC865AA738F5EE92B26DB9AF56509A5FC96FF9C3A1720633EBDDC62EC2162E7D5349CAC851ED0AD4E36DCF6FE25EBEAB42BF931DBE3CF4ED1A7BB8FD887C3C33D86B768B0BA7267C4E0E7DEE53D0931F71F07AE13BAFC46034A444EC24C7EA8F0086FAD197A8D2F18C6CBC5DF48050AF8D4C84DE03B9A6F1DF928D63286B1C924B7EC3BA8C2591D60491F95D271F0E7F02AA2AA93C3888B8CCEBB0414BD7145AD15A3166DB4860F85BC476B1B193C219EAE52E33E6BBC9B3AAAD97196977B7DABA36C04093ED723AD874EC6480477C6412B0F589DE6CC7D959855E41265213DCBB4D91238716DF38BF78C951259572F8E5968FAC5C5CDC006DBE919EEB5E5518F51162FCE7CDE520F60093D333FBE121D3164C6D2451F6431FB7973C659E6A9D287B545EC044DE2CBE170F3627719F8418D44E17987CEC7A89B52CB5525AF795DA892475ABF871C3A5A5FCBC5B03EB9BEC8598C8ADD7A68984BBBEF1244DD90386C05756687AB9D87A0B521319C093C3EC0D5EBEFDAB5459E29F1DA03D4C25DE740BF9FA2BC07DD510386E3BBE89F10D45513E29C8CF904763E723CE4BF2928D4DC2A731DD53595E9AACED90679FCDDACED022ECD59D72600A736D555A8B76BFE4CCD861E6A7F5A219EBE9A228BD008928299DB999D18F9CDD2E57E8C03EDF236E62EDB17A1FE5B023CF6E5A11892A5FA17EE5CFE348CA290DC691987A535223133D8CA101E8ABF13EFCAD929635E090B3C6BB6838E33B7C78C1DBA274101A6584300EF8D38C983AD544264217F6793562D19715CD711295C5410C72E88A64BD23D9049E5DF15EA6B3EB4473C1DDEBB416459322FEF0CC61D894476DCD62569527BE23FB7F66DF3F5182ABF2472FB60039CA77218F356D7F82E4EBAAA4C6875B5BD4729C81A29BDF55ED223AA0DAB04E1B248524FC504711360C330186327A780D6487BA831ABE55AAE38E69A0FBEF89D560E7AA26B991966E4B644338863E80AD9D1ACAD459EA933644C5A0D2EA44AD17205AED3BE66AEC01F48BA032EEBD620E2713082FE8D31E4A05A34F18BD389587FA4D3A9DFBB8C16AEE9C5FA9E667BA12A07B757D82F7BB41AC8867D9947CCBA3BB26381EC6D0D3966338DB6FA3D1A61F99A978C3B5ED2B31B7C14D54A4F688C4925C8AF99CB3EE3C2C06C7D35AD891BF0CFC820529FD990F2FF319BE195B1AD23C1667031C072EB1964F8512BB779125E46773C01714FCF0E339AEB0C44FB91B896A7A95AF4F81EB49006B570BC03ECA7D8DA45679F3B46A7AE3B46ED8D319CED49A3A5881A37CD3770703BDF026ACEF7D8662F85AFDBDD36C540FD419E18F30EA0483D24350B7C34C43F3D0065F339EAC15749DF8849F3880378FEA4AD7CCBAA827C828A5CAF7D56E97A87A3FAEEAE136B35FB37E8CE0233D9AF8DEABD47BD5B36A1B42B995D4F96FE744A2E25E9B6107801CACCA0DDC2B7ED5BFD39F68AB2E2BB66AB8286061049F3B5FFE871FFA520A7C0EEE3DEDF417D078DF9013B5F5251A07AE3D4D00B9AF1560200CC981D0E8BE17C9CE204C21E5E543C9E55421D4FCE2C309C68D376E3787AB4640FA99B82988A288FD22A2E0C9225E39A5DAA7EBEB0376912C9CA255A7AE49F3C5AB262B4FFFBA98A9548623C16D0C97C7315DF5FFD1507102EAA730E5247F1C492D49A45121347CFF39A5181729F1D33F28FA48035CBC02CF87DAF72067D70B524421AB21FF137A2C7AB2F90DAD1BA1786C16728E7B78DB0461B5B1E8CF7B88E765E67AF4E458EF3A5125D90DA88CE97D9AB9C4363E4A7D6B7F3B0420B93FEDF72248E076EC0871EDFC5744AC6F9F591CEC4CE3E0E681E1C1B21AFCC5BF5B22116F7E7A3ABA561F68F8AE685DA926756CD70C0E6057C7737537F972F8942CCFD073400F0D5C23F107F55FC07745ED334FB97130860A0B7B0B5B4B2B23417EA63C65BAF1624254BBA167373F1D6C0E0BB5A67F92008CFCA4F24276E725FD05802F94A5CC7E52CC005017C58A8757BDEDED54538DA513E975DFCDC7D3FA95552E960ABA05EB7C33CA37CCA1C93DFF13A493174A9BB3228118E0F2AEBBAEE074D557B6FA6000F0E5C73D563BB8E3598B4D8E94DDCAFEB5BBCDF74D39CCC8AD27A5D3C0CAB59D171D03EFF1C9129392939E2580257FCEA55859AEE4B88DCB2472D0598AA1E07F84ADA3F1ED185FAF33E81C730C6F9DD2C4E6BDABCDE3029325EA410F7D5810B6E31820F8C13B9850731A4938340082ED13F5B4240DBFFF3E050E3177641895D7044EF979459304B0B4911632A5CEDF0FDE677490ECFBE1B1',
                'SearchSql': SearchSql[0],
                'QueryJson': '{"Platform":"","DBCode":"CFLS","KuaKuCode":"CJFQ,CDMD,CIPD,CCND,CISD,SNAD,BDZK,CCJD,CCVD,CJFN","QNode":{"QGroup":[{"Key":"Subject","Title":"","Logic":1,"Items":[{"Title":"主题","Name":"SU","Value":"' + subject_name + '","Operate":"%=","BlurType":""}],"ChildItems":[]}]}}',
                'PageName': 'defaultresult',
                'HandlerId': '11',
                'DBCode': 'CFLS',
                'KuaKuCodes': 'CJFQ,CDMD,CIPD,CCND,CISD,SNAD,BDZK,CCJD,CCVD,CJFN',
                'CurPage': str(i),
                'RecordsCntPerPage': '20',
                'CurDisplayMode': 'listmode',
                'CurrSortField': '',
                'CurrSortFieldType': 'desc',
                'IsSortSearch': 'false',
                'IsSentenceSearch': 'false',
                'Subject': '',
            }

            response = requests.post(url=url, headers=headers, data=data)
            datas = response.text
            selector = parsel.Selector(datas)
            a_list = selector.css('td.name a')
            getUrl(a_list)


def getUrl(a_list):
    """
    获取所有的url，保存到一个url_list列表
    :param a_list: 解析Parsed_pages（）传过来的a_list，并构成一个完整的url地址
    :return:
    """
    for hrefs in a_list:
        href = hrefs.css('::attr(href)').get()
        parameters = re.findall("/KNS8/Detail\?.*&FileName=(.*?)&DbName=(.*?)&DbCode=(.*?)&.*", href)
        try:
            parameter = parameters[0]
            filename = parameter[0]
            dbname = parameter[1]
            dbcode = parameter[2]
            url = "https://kns.cnki.net/kcms/detail/detail.aspx?" + "dbcode=" + dbcode + "&dbname=" + dbname + "&filename=" + filename;
            print(url)
            url_list.append(url)
        except:
            print(parameters)


def saveUrl():
    """
    钒钛url地址的保存
    :return:
    """
    with open("url地址.csv", "a", encoding="utf-8", newline="") as f:
        writer = csv.DictWriter(f, fieldnames=["钒钛论文地址"])
        writer.writeheader()
        for i in range(len(url_list)):
            writer.writerow({"钒钛论文地址": url_list[i]})


def vanadiumTitaniumDownload():
    """
    钒钛pdf下载
    :return:
    """
    """.btn-dlpdf a::attr(href)"""
    for i in range(len(url_list)):
        datas = requests.get(url_list[i])


def readCsvList():
    with open('钒钛url地址.csv', 'r', encoding='gbk') as f:
        reader = csv.reader(f)
        items = [item for item in reader]
        items = list(items)
        items.pop(0)
        print(items)
        print(len(items))


if __name__ == '__main__':
    subject_name = input("输入要查询的论文主题名：")
    num = int(input("输入爬取的页数（不要输入过多以免超出范围）："))
    Parsed_pages(subject_name, num)
    print("完整的url列表为:", url_list)
    saveUrl()
    # readCsvList()
